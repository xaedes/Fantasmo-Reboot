;Format: 
;[Vorschlag für Mnemonics - ] Befehlsbeschreibung [ : Parameter ]


NOP - Tue nichts
EXT - Erweiterter Befehl, tut bisher nichts
<Kontroll Befehle> 1 Stück
RESET


<Load Store Befehle> 9 Stück 
LDC - Lade Konstante in Register : 8 Bit Registernummer, 16 Bit Konstante
LD - Lies von MCU in Register : 8 Bit Registernummer, 16 Bit Adresse
ST - Schreib Register in MCU : 8 Bit Registernummer, 16 Bit Adresse
ILD - Lies von Adresse, die im (zweiten) Register steht, vom MCU in (erstes) Register : 8 Bit Registernummer, 8 Bit Registernummer
IST - Schreib (erstes) Register in Adresse welche im (zweiten) Register steht in MCU : 8 Bit Registernummer, 8 Bit Registernummer
IN - Liest 16 Bit Wert von Gerät welches im Parameter spezifiert wird in Register: 8 Bit Registernummer, 16 Bit Gerätenummer
OUT - Schreibt 16 Bit Wert von Register in Gerät welches im Parameter spezifiert wird: 8 Bit Registernummer, 16 Bit Gerätenummer
IIN - Liest 16 Bit Wert von Gerät welches durch Inhalt des (zweiten) Registers spezifiert wird in Register: 8 Bit Registernummer, 8 Bit Registernummer
IOUT - Schreibt 16 Bit Wert von Register in Gerät welches durch Inhalt des (zweiten) Registers spezifiert wird: 8 Bit Registernummer, 8 Bit Registernummer

<ALU Befehle> 4 Stück
//OP = ALU Operation (8 Bit)
//R1 = Register im zweiten Parameter (8 Bit)
//R2 = Register im dritten Parameter (8 Bit)
ALU1 - R1 <- OP(R1)    : 8 Bit ALU Operation, 8 Bit Registernummer
ALU2 - R1 <- OP(R1,R2) : 8 Bit ALU Operation, 8 Bit Registernummer, 8 Bit Registernummer
ALUC - OP(R1,R2)       : 8 Bit ALU Operation, 8 Bit Registernummer, 8 Bit Registernummer
ALUF - R1 <- ALU Flags : 8 Bit Registernummer

/*
ALU Operationen:
Einstellig:  NOT
Zweistellig: ADD,SUB,NOT,AND,OR,XOR,SHL,SHR,CMP
Bei SHL und SHR werden Nullen eingeschoben

Bei ALUC wird das Ergebnis berechnet, die Flags entsprechend gesetzt, das Ergebnis dann aber verworfen. 
*/

<Jump Befehle> 3 Stück 
Flags = T(Always), C, Z
JMP - Schreibe Parameter in PC wenn C : 8 Bit Condition Codes, 16 Bit Adresse von nächsten Befehl
RJMP - Schreibe Parameter in PC wenn C : 8 Bit Condition Codes, 16 Bit Adresse von nächsten Befehl relativ zu Adresse: PC(von dieser OP) minus 2^15
IJMP - Schreibe Wert von Register in PC wenn C : 8 Bit Condition Codes, 8 Bit Registernummer


Jump, Load Store Befehle und NOP : 15 Stück (mit 5 Bit codierbar)


Der OP Code wird in einem Byte mit 8 Bit gespeichert. 
Es werden immer 16 Bit eingelesen.
Gespeichert wird dieser Wert im Instruction Register 1 (IR1). 
Sollte der Befehl weitere Operanden benötigen, die nicht in IR1 kodiert sind, wird das nächste eingelesene Wort in IR2 gespeichert.
Ein Befehl umfasst mindest ein eingelesenes Wort.

Komponenten:
In der Microcode Instruction Table steht für jeden OP Code die Microcode Instruction Startadresse
Condition Unit zum Testen der ALU Flags

Register im Steuerwerk (wenn nicht anders angegeben 16 Bit):
IR1  - Instruction Register 1
IR2  - Instruction Register 1
PC   - Programcounter
MIP  - Microcode Instruction Pointer
MA   - Memory Address Register
MD   - Memory Data Register
MS   - Memory Set Register
MITO - Microcode Instruction Table Opcode (8Bit)
MITV - Microcode Instruction Table Value
RN   - Register Nummer (8Bit)
RS   - Register Set - zum Setzen des Registers
R    - Register Value
DVN  - Device Nummer
DV   - Device Value
DVS  - Device Set
CC   - Condition Unit Code Set (8Bit)
C    - Condition Unit Result (1Bit)
ALUO - ALU Operation Set (4Bit)
ALU1 - ALU Parameter 1
ALU2 - ALU Parameter 2
ALU  - ALU Ergebnis

Befehlsablauf der für alle Befehle gleich ist:
MA <- PC
PC <- PC + 1
IR1 <- MD
MITO <- IR1[0..7]
MIP <- MITV



